// Code generated by mockery v2.42.1. DO NOT EDIT.

package micbunio

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockTwirpServer is an autogenerated mock type for the TwirpServer type
type MockTwirpServer struct {
	mock.Mock
}

type MockTwirpServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTwirpServer) EXPECT() *MockTwirpServer_Expecter {
	return &MockTwirpServer_Expecter{mock: &_m.Mock}
}

// PathPrefix provides a mock function with given fields:
func (_m *MockTwirpServer) PathPrefix() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PathPrefix")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockTwirpServer_PathPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PathPrefix'
type MockTwirpServer_PathPrefix_Call struct {
	*mock.Call
}

// PathPrefix is a helper method to define mock.On call
func (_e *MockTwirpServer_Expecter) PathPrefix() *MockTwirpServer_PathPrefix_Call {
	return &MockTwirpServer_PathPrefix_Call{Call: _e.mock.On("PathPrefix")}
}

func (_c *MockTwirpServer_PathPrefix_Call) Run(run func()) *MockTwirpServer_PathPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTwirpServer_PathPrefix_Call) Return(_a0 string) *MockTwirpServer_PathPrefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTwirpServer_PathPrefix_Call) RunAndReturn(run func() string) *MockTwirpServer_PathPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// ProtocGenTwirpVersion provides a mock function with given fields:
func (_m *MockTwirpServer) ProtocGenTwirpVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProtocGenTwirpVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockTwirpServer_ProtocGenTwirpVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProtocGenTwirpVersion'
type MockTwirpServer_ProtocGenTwirpVersion_Call struct {
	*mock.Call
}

// ProtocGenTwirpVersion is a helper method to define mock.On call
func (_e *MockTwirpServer_Expecter) ProtocGenTwirpVersion() *MockTwirpServer_ProtocGenTwirpVersion_Call {
	return &MockTwirpServer_ProtocGenTwirpVersion_Call{Call: _e.mock.On("ProtocGenTwirpVersion")}
}

func (_c *MockTwirpServer_ProtocGenTwirpVersion_Call) Run(run func()) *MockTwirpServer_ProtocGenTwirpVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTwirpServer_ProtocGenTwirpVersion_Call) Return(_a0 string) *MockTwirpServer_ProtocGenTwirpVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTwirpServer_ProtocGenTwirpVersion_Call) RunAndReturn(run func() string) *MockTwirpServer_ProtocGenTwirpVersion_Call {
	_c.Call.Return(run)
	return _c
}

// ServeHTTP provides a mock function with given fields: _a0, _a1
func (_m *MockTwirpServer) ServeHTTP(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// MockTwirpServer_ServeHTTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeHTTP'
type MockTwirpServer_ServeHTTP_Call struct {
	*mock.Call
}

// ServeHTTP is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *MockTwirpServer_Expecter) ServeHTTP(_a0 interface{}, _a1 interface{}) *MockTwirpServer_ServeHTTP_Call {
	return &MockTwirpServer_ServeHTTP_Call{Call: _e.mock.On("ServeHTTP", _a0, _a1)}
}

func (_c *MockTwirpServer_ServeHTTP_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *MockTwirpServer_ServeHTTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockTwirpServer_ServeHTTP_Call) Return() *MockTwirpServer_ServeHTTP_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTwirpServer_ServeHTTP_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockTwirpServer_ServeHTTP_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceDescriptor provides a mock function with given fields:
func (_m *MockTwirpServer) ServiceDescriptor() ([]byte, int) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceDescriptor")
	}

	var r0 []byte
	var r1 int
	if rf, ok := ret.Get(0).(func() ([]byte, int)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// MockTwirpServer_ServiceDescriptor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceDescriptor'
type MockTwirpServer_ServiceDescriptor_Call struct {
	*mock.Call
}

// ServiceDescriptor is a helper method to define mock.On call
func (_e *MockTwirpServer_Expecter) ServiceDescriptor() *MockTwirpServer_ServiceDescriptor_Call {
	return &MockTwirpServer_ServiceDescriptor_Call{Call: _e.mock.On("ServiceDescriptor")}
}

func (_c *MockTwirpServer_ServiceDescriptor_Call) Run(run func()) *MockTwirpServer_ServiceDescriptor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTwirpServer_ServiceDescriptor_Call) Return(_a0 []byte, _a1 int) *MockTwirpServer_ServiceDescriptor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTwirpServer_ServiceDescriptor_Call) RunAndReturn(run func() ([]byte, int)) *MockTwirpServer_ServiceDescriptor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTwirpServer creates a new instance of MockTwirpServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTwirpServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTwirpServer {
	mock := &MockTwirpServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
