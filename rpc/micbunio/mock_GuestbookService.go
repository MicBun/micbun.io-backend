// Code generated by mockery v2.42.1. DO NOT EDIT.

package micbunio

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockGuestbookService is an autogenerated mock type for the GuestbookService type
type MockGuestbookService struct {
	mock.Mock
}

type MockGuestbookService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGuestbookService) EXPECT() *MockGuestbookService_Expecter {
	return &MockGuestbookService_Expecter{mock: &_m.Mock}
}

// CreateGuestbook provides a mock function with given fields: _a0, _a1
func (_m *MockGuestbookService) CreateGuestbook(_a0 context.Context, _a1 *CreateGuestbookRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateGuestbook")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateGuestbookRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateGuestbookRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateGuestbookRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGuestbookService_CreateGuestbook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGuestbook'
type MockGuestbookService_CreateGuestbook_Call struct {
	*mock.Call
}

// CreateGuestbook is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *CreateGuestbookRequest
func (_e *MockGuestbookService_Expecter) CreateGuestbook(_a0 interface{}, _a1 interface{}) *MockGuestbookService_CreateGuestbook_Call {
	return &MockGuestbookService_CreateGuestbook_Call{Call: _e.mock.On("CreateGuestbook", _a0, _a1)}
}

func (_c *MockGuestbookService_CreateGuestbook_Call) Run(run func(_a0 context.Context, _a1 *CreateGuestbookRequest)) *MockGuestbookService_CreateGuestbook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*CreateGuestbookRequest))
	})
	return _c
}

func (_c *MockGuestbookService_CreateGuestbook_Call) Return(_a0 *emptypb.Empty, _a1 error) *MockGuestbookService_CreateGuestbook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGuestbookService_CreateGuestbook_Call) RunAndReturn(run func(context.Context, *CreateGuestbookRequest) (*emptypb.Empty, error)) *MockGuestbookService_CreateGuestbook_Call {
	_c.Call.Return(run)
	return _c
}

// GetGuestbookList provides a mock function with given fields: _a0, _a1
func (_m *MockGuestbookService) GetGuestbookList(_a0 context.Context, _a1 *GetGuestbookListRequest) (*GetGuestbookListResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetGuestbookList")
	}

	var r0 *GetGuestbookListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetGuestbookListRequest) (*GetGuestbookListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetGuestbookListRequest) *GetGuestbookListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetGuestbookListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetGuestbookListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGuestbookService_GetGuestbookList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGuestbookList'
type MockGuestbookService_GetGuestbookList_Call struct {
	*mock.Call
}

// GetGuestbookList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *GetGuestbookListRequest
func (_e *MockGuestbookService_Expecter) GetGuestbookList(_a0 interface{}, _a1 interface{}) *MockGuestbookService_GetGuestbookList_Call {
	return &MockGuestbookService_GetGuestbookList_Call{Call: _e.mock.On("GetGuestbookList", _a0, _a1)}
}

func (_c *MockGuestbookService_GetGuestbookList_Call) Run(run func(_a0 context.Context, _a1 *GetGuestbookListRequest)) *MockGuestbookService_GetGuestbookList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetGuestbookListRequest))
	})
	return _c
}

func (_c *MockGuestbookService_GetGuestbookList_Call) Return(_a0 *GetGuestbookListResponse, _a1 error) *MockGuestbookService_GetGuestbookList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGuestbookService_GetGuestbookList_Call) RunAndReturn(run func(context.Context, *GetGuestbookListRequest) (*GetGuestbookListResponse, error)) *MockGuestbookService_GetGuestbookList_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGuestbookService creates a new instance of MockGuestbookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGuestbookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGuestbookService {
	mock := &MockGuestbookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
